/*
 *  Copyright (c) 2007 - 2011, CherryOnExt Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the CherryOnExt Team nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL CherryOnExt Team BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.Operator=function(b,a){this.id=b;this.label=((a==undefined)?b:a);this.field=null};Ext.ux.netbox.core.Operator.prototype={isAvailableValuesAvailable:function(){if(this.getField()===null){throw ("An operator must be associated to a Field to know if there is the list of the available values!")}return(this.getField().isAvailableValuesAvailable())},getAvailableValues:function(){if(!this.isAvailableValuesAvailable()){throw ("Available values not available!")}if(this.getField()==null){throw ("An operator must be associated to a field to obtain the list of the available values!")}return(this.getField().getAvailableValues())},getId:function(){return(this.id)},getLabel:function(){return(this.label)},setField:function(a){this.field=a},getField:function(){return(this.field)},render:function(a){if(this.getField()===undefined||this.getField()===null){throw ("Impossible to render a value from the operator "+this.getId()+" which is without field")}return(this.getField().render(a,this.getId()))},getEditor:function(a){if(this.getField()==undefined||this.getField()==null){throw ("Impossible to obtain the editor for the operator "+this.getId()+" which is without field")}var c;if(a===undefined){a=true}if(this.editor==null||!a){c=this.createEditor();var b=c.field;var d=b.validateValue;var f=this.validate;var e=this;b.validateValue=function(h){var i=b.value;if(b.value===undefined||b.value===null){i=""}if(d.call(this,i)===false){return false}var g=f.call(e,c.getValue());if(g===true){return true}b.markInvalid(g)};if(a){this.editor=c}}else{c=this.editor}return(c)},convertValue:function(a){if(a!==null&&a!==undefined&&Ext.type(a)=="array"){if(a.length>0&&a[0].value!==undefined&&a[0].label!==undefined){if(a.length==1){return(a)}else{return([a[0]])}}}return([])},isStoreRemote:function(){if(this.getField()===undefined||this.getField()===null){throw ("Impossible to obtain the type of the store (remote/local) for the operator "+this.getId()+" which is without field")}return(this.getField().isStoreRemote())},isForceReload:function(){if(this.getField()===undefined||this.getField()===null){throw ("Impossible to obtain the forceReload info for the operator "+this.getId()+" which is without field")}return(this.getField().isForceReload())},isCaseSensitive:function(){if(this.getField()===undefined||this.getField()===null){throw ("Impossible to obtain the caseSensitive info for the operator "+this.getId()+" which is without field")}return(this.getField().isCaseSensitive())},getDefaultValues:function(){return(this.getField().getDefaultValues())},validate:function(b){if(this.validateFn!==undefined){return this.validateFn.call(this,b)}if(this.getField()===undefined||this.getField()===null){throw ("Impossible to call the validate function on the field: is not defined. Operation id: "+this.getId())}var a=this.getField().validate(b);if(a&&this.additionalValidationFn){a=this.additionalValidationFn.call(this,b)}return(a)},createEditor:function(){if(this.getField()===undefined||this.getField()===null){throw ("Impossible to create the editor for the operator "+this.getId()+" which is without field")}return(this.getField().createEditor(this.getId()))},addValidateFn:function(a){this.additionalValidationFn=a},setValidateFn:function(a){this.validateFn=a}};Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.Field=function(c,a,b){Ext.ux.netbox.core.Field.superclass.constructor.call(this);this.addEvents({operatorAdded:true,operatorRemoved:true,defaultOperatorChanged:true});this.id=c;this.label=((a===undefined)?c:a);this.availableOperators=[];this.defaultOperator=null;this.editor=null;this.availableValueStore=null;this.isRemote=true;this.forceReload=false;this.defaultValues=((b==undefined)?[]:b);this.validateFunc=null};Ext.extend(Ext.ux.netbox.core.Field,Ext.util.Observable,{caseSensitive:true,getDefaultValues:function(){return(this.defaultValues)},setDefaultValues:function(a){var c=[];for(var b=0;b<a.length;b++){if(a[b].label==undefined){a[b].label=a[b].value}c.push(a[b])}this.defaultValues=c},getDefaultOperator:function(){return(this.defaultOperator)},setDefaultOperator:function(a){var c=a.getId();var b=this.getAvailableOperatorById(c);if(b==null){throw ("operator not among available operators")}this.defaultOperator=a;this.fireEvent("defaultOperatorChanged",a)},getAvailableValues:function(){if(!this.isAvailableValuesAvailable()){throw ("Available values not available!")}return(this.availableValueStore)},setAvailableValues:function(a){this.availableValueStore=a;this.editor=null},isAvailableValuesAvailable:function(){return(this.availableValueStore!==null)},setStoreRemote:function(a){this.isRemote=a},isStoreRemote:function(){if(!this.isAvailableValuesAvailable()){throw (this.getId()+" isStoreRemote: no store available")}return(this.isRemote)},setForceReload:function(a){this.forceReload=a},isForceReload:function(){if(!this.isAvailableValuesAvailable()){throw (this.getId()+" isForceReload: no store available")}return(this.forceReload)},setCaseSensitive:function(a){this.caseSensitive=a},isCaseSensitive:function(){if(!this.isAvailableValuesAvailable()){throw (this.getId()+" isCaseSensitive: no store available")}return(this.caseSensitive)},addOperator:function(a){if(a.getField()!==null&&a.getField()!=this){throw ("Impossible to add the operator "+a.getId()+" to the Field "+this.getId()+". The operator is already associated to another Field")}this.availableOperators.push(a);a.setField(this);this.fireEvent("operatorAdded",a)},getAvailableOperators:function(){return(this.availableOperators)},getAvailableOperatorById:function(b){var a=this._getOperatorIndexById(b);if(a===null){return(null)}else{return(this.getAvailableOperators()[a])}},_getOperatorIndexById:function(c){var b=this.getAvailableOperators();for(var a=0;a<b.length;a++){if(b[a].getId()==c){return(a)}}return(null)},removeOperator:function(c){var b=this._getOperatorIndexById(c);if(b===null){throw ("The operator with the given id doesn't exist")}else{var a=this.getAvailableOperators()[b];if(a==this.getDefaultOperator){throw ("operator to remove is the DefaultOperator")}this.availableOperators.splice(b,1);this.fireEvent("operatorRemoved",a)}},getElementaryFilterInstance:function(a){var b=new Ext.ux.netbox.core.ElementaryFilter(this,a);return b},getId:function(){return(this.id)},getLabel:function(){return(this.label)},render:function(c,a){if(c!==undefined&&c!==null){if(Ext.type(c)=="array"){var d=[];for(var b=0;b<c.length;b++){d.push(this.render(c[b],a))}return(d.join(","))}else{if(c.value!==undefined&&c.label!==undefined){return(this.render(c.label,a))}return(String(c))}}else{return("")}},createEditor:function(a){var b;if(!this.isAvailableValuesAvailable()){b=new Ext.ux.netbox.core.TextValuesEditor()}else{b=new Ext.ux.netbox.core.AvailableValuesEditor(this.getAvailableValues(),{remote:this.isStoreRemote(),forceReload:this.isForceReload(),caseSensitive:this.isCaseSensitive()})}return b},setValidateFn:function(a){this.validateFunc=a},validate:function(a){if(this.validateFunc!==null){return this.validateFunc.call(this,a)}else{return true}},emptyNotAllowedFn:function(a){if(!a){return(this.emptyNotAllowed)}if(!a.length){return(this.emptyNotAllowed)}return(true)},emptyNotAllowed:"Empty value not allowed"});Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.Filter=function(){Ext.ux.netbox.core.Filter.superclass.constructor.call(this)};Ext.extend(Ext.ux.netbox.core.Filter,Ext.util.Observable,{getFilterObj:function(){throw ("getFilterObj is an abstract method!")},setFilterObj:function(a){throw ("setFilterObj is an abstract method!")},getElementaryFilterById:function(a){throw ("getElementaryFilterById is an abstract method!")},getElementaryFiltersByFieldId:function(a){throw ("getElementaryFiltersByFieldId is an abstract method!")}});Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.ElementaryFilter=function(b,a){Ext.ux.netbox.core.ElementaryFilter.superclass.constructor.call(this);this.addEvents({operatorChanged:true,valueChanged:true});this.id=b.getId()+Ext.ux.netbox.core.ElementaryFilter.sequence;Ext.ux.netbox.core.ElementaryFilter.sequence++;this.field=b;this.operator;this.setOperator(((a==undefined)?b.getDefaultOperator():a));this.values;this.setValues(this.getOperator().getDefaultValues())};if(Ext.ux.netbox.core.ElementaryFilter.sequence==undefined){Ext.ux.netbox.core.ElementaryFilter.sequence=0}Ext.extend(Ext.ux.netbox.core.ElementaryFilter,Ext.ux.netbox.core.Filter,{getField:function(){return(this.field)},getOperator:function(){return(this.operator)},setOperator:function(a){if(a==null){throw ("Null Operator not allowed")}if(a.getId){if(this.field.getAvailableOperatorById(a.getId())==null){throw ("Operator "+a.getId()+" is not available for this elementaryFilter")}}else{var b=this.getField().getAvailableOperatorById(a);if(b==null){throw ("Operator "+a+" is not available for this elementaryFilter")}a=b}this.operator=a;this.fireEvent("operatorChanged",this,a);this.setValues(this.operator.convertValue(this.getValues()))},getValues:function(){if(this.values){return(this.values.concat())}return(this.values)},addValue:function(a){this.values.push(a);this.fireEvent("valueChanged",this,a)},removeValue:function(c){var b=-1;for(var a=0;a<this.getValues().length;a++){if(this.getValues()[a]==c){b=a;break}}if(b!=-1){this.values.splice(b,1);this.fireEvent("valueChanged",this,c)}else{throw ("Unable to remove the value "+c+". Not found")}},setValues:function(a){if(a===undefined||a===null){throw ("ElementaryFilter "+this.getId()+". Impossible to set a undefined or null value. The empty value is an empty array.")}if(Ext.type(a)!="array"){throw ("ElementaryFilter "+this.getId()+". The value of a ElementaryFilter MUST be an array!")}if(Ext.util.JSON.encode(this.values)!=Ext.util.JSON.encode(a)){if(this.getOperator().validate(a)===true||this.getOperator().validate(this.getValues())!==true){this.values=a;this.fireEvent("valueChanged",this,a)}}},getFilterObj:function(){return({fieldId:this.getField().getId(),operatorId:this.getOperator().getId(),values:this.getValues()})},setFilterObj:function(a){if(this.getField().getId()!=a.fieldId){throw ("Wrong field for this filter. Expected "+this.getField().getId()+" got "+a.fieldId)}this.setOperator(this.getField().getAvailableOperatorById(a.operatorId));this.setValues(a.values)},getId:function(){return(this.id)},getElementaryFilterById:function(a){if(this.getId()==a){return(this)}return(null)},getElementaryFiltersByFieldId:function(a){if(this.getField().getId()==a){return([this])}return([])},isValid:function(){if(this.values!==undefined&&this.getOperator().validate(this.values)===true){return true}else{return false}}});Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.CompositeFilter=function(c,a,b){Ext.ux.netbox.core.CompositeFilter.superclass.constructor.call(this);this.addEvents({leftSideChanged:true,rightSideChanged:true,operatorChanged:true});this.left;this.setLeftSide(c);this.logicalOperator;this.setLogicalOperator(a);this.right;this.setRightSide(b)};Ext.ux.netbox.core.CompositeFilter.OR="OR";Ext.ux.netbox.core.CompositeFilter.AND="AND";Ext.extend(Ext.ux.netbox.core.CompositeFilter,Ext.ux.netbox.core.Filter,{AND:Ext.ux.netbox.core.CompositeFilter.AND,OR:Ext.ux.netbox.core.CompositeFilter.OR,setLogicalOperator:function(a){if(a!=Ext.ux.netbox.core.CompositeFilter.AND&&a!=Ext.ux.netbox.core.CompositeFilter.OR){throw ("Unknown logical operator : "+a)}this.logicalOperator=a;this.fireEvent("operatorChanged",this)},getLogicalOperator:function(){return(this.logicalOperator)},setRightSide:function(a){this.right=a;this.fireEvent("rightSideChanged",this)},getRightSide:function(){return(this.right)},setLeftSide:function(a){this.left=a;this.fireEvent("leftSideChanged",this)},getLeftSide:function(){return(this.left)},setFilterObj:function(a){this.setLeftSide(a.left);this.setLogicalOperator(a.logicalOperator);this.setRightSide(a.right)},getFilterObj:function(){return{left:this.getLeftSide(),logicalOperator:this.getLogicalOperator(),right:this.getRightSide()}},getElementaryFilterById:function(b){var a=this.getLeftSide().getElementaryFilterById(b);if(a!=null){return(a)}if(this.getRightSide()!=null){return(this.getRightSide().getElementaryFilterById(b))}return null},getElementaryFiltersByFieldId:function(a){var b=this.getLeftSide().getElementaryFiltersByFieldId(a);if(this.getRightSide()!=null){b=b.concat(this.getRightSide().getElementaryFiltersByFieldId(a))}return b}});Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.FieldManager=function(a){Ext.ux.netbox.core.FieldManager.superclass.constructor.call(this);this.addEvents({fieldAdded:true,fieldRemoved:true,beforeFieldRemoved:true});this.fields=new Ext.util.MixedCollection(false,function(c){return(c.getId())});if(a!==undefined){for(var b=0;b<a.length;b++){this.addField(a[b])}}};Ext.extend(Ext.ux.netbox.core.FieldManager,Ext.util.Observable,{getAllFields:function(){return(this.fields.getRange())},getFieldById:function(b){var a=this.fields.get(b);if(!a){return(null)}return(a)},createFieldFromCfg:function(b){var a;if(b.type===undefined){b.type="string"}switch(b.type){case"string":a=new Ext.ux.netbox.string.StringField(b.id,b.label);break;case"enum":a=new Ext.ux.netbox.string.EnumField(b.id,b.label);break;case"float":case"int":a=new Ext.ux.netbox.number.NumberField(b.id,b.label);break;case"date":a=new Ext.ux.netbox.date.DateField(b.id,b.label,b.format);break;default:return(null)}if(b.availableValues!==undefined){a.setAvailableValues(b.availableValues);if(b.remoteStore!==undefined){a.setStoreRemote(b.remoteStore)}if(b.type=="string"||b.type=="enum"){a.addOperator(new Ext.ux.netbox.string.StringListOperator("STRING_LIST",a.stringListText));a.addOperator(new Ext.ux.netbox.string.StringListOperator("STRING_NOT_IN_LIST",a.stringNotListText))}}if(b.defaultValues!==undefined){a.setDefaultValues(b.defaultValues)}if(b.forceReload!==undefined){a.setForceReload(b.forceReload)}if(b.caseSensitive!==undefined){a.setCaseSensitive(b.caseSensitive)}if(b.validate!==undefined){a.setValidateFn(b.validate)}return(a)},addField:function(a){if(!(a instanceof Ext.ux.netbox.core.Field)){a=this.createFieldFromCfg(a)}this.fields.add(a);this.fireEvent("fieldAdded",a)},removeField:function(a){if(this.fields.containsKey(a.getId())){if(this.fireEvent("beforeFieldRemoved",a)!==false){if(this.fields.removeKey(a.getId())){this.fireEvent("fieldRemoved",a)}}}},removeAll:function(){for(var a=this.fields.items.length-1;a>=0;a--){this.removeField(this.fields.items[a])}},reconfigure:function(a){this.removeAll();if(a!==undefined){for(var b=0;b<a.length;b++){this.addField(a[b])}}}});Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.FilterModel=function(a){Ext.ux.netbox.core.FilterModel.superclass.constructor.call(this);this.addEvents({elementaryFilterAdded:true,elementaryFilterRemoved:true,filterChanged:true});this.filter=null;if(a instanceof Ext.ux.netbox.core.FieldManager){this.fieldManager=a}else{this.fieldManager=new Ext.ux.netbox.core.FieldManager(a)}this.fieldManager.on("beforeFieldRemoved",this.onBeforeFieldRemoved,this);if(a.logicalOperator===undefined){this.logicalOperator=Ext.ux.netbox.core.CompositeFilter.AND}else{this.logicalOperator=a.logicalOperator}};Ext.extend(Ext.ux.netbox.core.FilterModel,Ext.util.Observable,{onBeforeFieldRemoved:function(a){if(this.getElementaryFiltersByFieldId(a.getId()).length>0){return(false)}},_createFilter:function(c,b,a){var d=this.getFieldManager().getFieldById(c);if(d==null){throw ("Field "+c+" not found!")}var e=d.getElementaryFilterInstance();if(b!=undefined){e.setOperator(b)}if(a!=undefined){e.setValues(a)}return(e)},_addFilter:function(a){if(this.getFilter()==null){this.filter=a}else{this.filter=new Ext.ux.netbox.core.CompositeFilter(this.getFilter(),this.logicalOperator,a)}this.fireEvent("elementaryFilterAdded",this,a)},_decodeFilter:function(f){if(f.fieldId){var d=this.getFieldManager().getFieldById(f.fieldId);if(d==null){throw ("Field "+f.fieldId+" not found!")}var b=d.getAvailableOperatorById(f.operatorId);if(b===null){b=undefined}var e=d.getElementaryFilterInstance(b);e.setFilterObj(f);return(e)}else{var g=this._decodeFilter(f.left);var a=this._decodeFilter(f.right);var c=new Ext.ux.netbox.core.CompositeFilter(g,f.logicalOperator,a);return(c)}},_encodeFilter:function(b){if(b.setValues){return(b.getFilterObj())}else{var a=b.getFilterObj();a.left=this._encodeFilter(a.left);a.right=this._encodeFilter(a.right);return(a)}},_findAndRemoveFilter:function(f,e,c,b){if(e instanceof Ext.ux.netbox.core.ElementaryFilter){if(c.call(this,e)){b.push(e);return(true)}else{return(false)}}var d=this._findAndRemoveFilter(e,e.getLeftSide(),c,b);var a=this._findAndRemoveFilter(e,e.getRightSide(),c,b);if(a&&d){return(true)}if(d){if(f.getLeftSide()==e){f.setLeftSide(e.getRightSide())}else{f.setRightSide(e.getRightSide())}}if(a){if(f.getLeftSide()==e){f.setLeftSide(e.getLeftSide())}else{f.setRightSide(e.getLeftSide())}}return(false)},getFieldManager:function(){return(this.fieldManager)},getFilter:function(){return(this.filter)},getFilterObj:function(e,j,i){var h;if(j===undefined){h=null}else{h=this._decodeFilter(j)}if(i===undefined){i=Ext.ux.netbox.core.CompositeFilter.AND}var c=this.getFilter();var a=null;if(this.getFilter()!==null){if(c===null){a=h}else{a=this._decodeFilter(this._encodeFilter(this.getFilter()));if(h!==null){a=new Ext.ux.netbox.core.CompositeFilter(a,i,h)}}}if(a instanceof Ext.ux.netbox.core.ElementaryFilter){if(!a.isValid()){a=null}}else{if(a!==null){var g=function(k){return(!k.isValid())};var b=[];var d=this._findAndRemoveFilter(a,a.getLeftSide(),g,b);var f=this._findAndRemoveFilter(a,a.getRightSide(),g,b);if(d&&f){a=null}else{if(d){a=a.getRightSide()}else{if(f){a=a.getLeftSide()}}}}}if(a!=null){return(this._encodeFilter(a))}else{return null}},setFilterObj:function(a){if(a){if(!a.setFilterObj){a=this._decodeFilter(a)}}this.filter=a;this.fireEvent("filterChanged",this)},getElementaryFilterById:function(a){if(this.getFilter()!=null){return(this.getFilter().getElementaryFilterById(a))}return(null)},getElementaryFiltersByFieldId:function(a){if(this.getFilter()!=null){return(this.getFilter().getElementaryFiltersByFieldId(a))}return[]},addElementaryFilterByFieldId:function(a){var b=this._createFilter(a);this._addFilter(b);return(b.getId())},addElementaryFilter:function(b){var a=this._createFilter(b.fieldId,b.operatorId,b.values);this._addFilter(a);return(a.getId())},removeElementaryFilterById:function(b){var c=null;if(this.getFilter()==null){throw ("Unable to remove the elementaryFilter with id "+b+". The elementaryFilter doesn't exist.")}if(this.getFilter() instanceof Ext.ux.netbox.core.ElementaryFilter){if(this.getFilter().getId()==b){c=this.filter;this.filter=null}else{throw ("Unable to remove the elementaryFilter with id "+b+". The elementaryFilter doesn't exist")}}else{var e=function(g){if(g.getId()===b){return(true)}else{return(false)}};var d=[];var f=this._findAndRemoveFilter(this.getFilter(),this.getFilter().getLeftSide(),e,d);var a=this._findAndRemoveFilter(this.getFilter(),this.getFilter().getRightSide(),e,d);if(d.length===0){throw ("Unable to remove the elementaryFilter with id "+b+". The elementaryFilter doesn't exist")}c=d[0];if(f){this.filter=this.getFilter().getRightSide()}if(a){this.filter=this.getFilter().getLeftSide()}}this.fireEvent("elementaryFilterRemoved",this,c)},getAllElementaryFilters:function(b){if(b===undefined){b=this.getFilter()}var a=[];if(b!=null){if(b.setValues){a.push(b)}else{a=a.concat(this.getAllElementaryFilters(b.getLeftSide()));a=a.concat(this.getAllElementaryFilters(b.getRightSide()))}}return(a)},getLogicalOperator:function(){return this.logicalOperator},setLogicalOperator:function(a){if(a===Ext.ux.netbox.core.CompositeFilter.OR||a===Ext.ux.netbox.core.CompositeFilter.AND){this.logicalOperator=a}},each:function(c,b,a){if(a===undefined){a=this.getFilter()}if(a==null){return}if(b===undefined){b=window}c.call(b,a);if(a instanceof Ext.ux.netbox.core.CompositeFilter){this.each(c,b,a.getLeftSide());this.each(c,b,a.getRightSide())}}});Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.DynamicFilterModelView=function(a){this.filterModel=a.filterModel;this.createFieldCombo();this.createLogicOpeCombo();a=this.createFilterGridConfig(a);Ext.ux.netbox.core.DynamicFilterModelView.superclass.constructor.call(this,a);this.populateFilterStore();this.setLogicOpeCombo();this.on("cellclick",this.removeFilter,this);this.on("beforeedit",this.updateOperatorStore,this);this.on("afteredit",this.updateFilter,this);this.getFilterModel().on("elementaryFilterAdded",this.onFilterAdded,this);this.getFilterModel().on("elementaryFilterRemoved",this.onFilterRemoved,this);this.getFilterModel().on("filterChanged",this.onFilterChanged,this);this.getFilterModel().getFieldManager().on("fieldAdded",this.onFieldAdded,this);this.getFilterModel().getFieldManager().on("fieldRemoved",this.onFieldRemoved,this);this.getView().getRowClass=function(c,f,g,d){var b="";var e=c.data.filter;if(!e.isValid()){b="x-grid3-row-notValid"}return b}};Ext.extend(Ext.ux.netbox.core.DynamicFilterModelView,Ext.grid.EditorGridPanel,{deleteText:"Delete",filterText:"Field",operatorText:"Operator",valueText:"Value",comboText:"Select a new field",logicOpeAndText:"Check all",logicOpeOrText:"Check at least one",getFilterModel:function(){return(this.filterModel)},onFieldAdded:function(a){this.addFields([a])},onFieldRemoved:function(a){this.removeFields(a)},onFilterAdded:function(c,b){var a=[];a.push(["",b.getField(),b.getOperator().getId(),b.getValues(),b,b.getId()]);this.filterStore.loadData(a,true);b.on("operatorChanged",this.updateFilterOperator,this);b.on("valueChanged",this.updateFilterValues,this)},onFilterRemoved:function(c,b){var a=this.filterStore.getById(b.getId());this.filterStore.remove(a);b.un("operatorChanged",this.updateFilterOperator,this);b.on("valueChanged",this.updateFilterValues,this)},onFilterChanged:function(){this.populateFilterStore();this.setLogicOpeCombo()},onEditComplete:function(b,d,a){this.editing=false;this.activeEditor=null;b.un("specialkey",this.selModel.onEditorKey,this.selModel);if(Ext.util.JSON.encode(d)!==Ext.util.JSON.encode(a)){var c=b.record;c.set=function(e,h){if(Ext.util.JSON.encode(this.data[e])==Ext.util.JSON.encode(h)){return}this.dirty=true;if(!this.modified){this.modified={}}if(typeof this.modified[e]=="undefined"){this.modified[e]=this.data[e]}this.data[e]=h;if(!this.editing){this.store.afterEdit(this)}};var g=this.colModel.getDataIndex(b.col);var f={grid:this,record:c,field:g,originalValue:a,value:d,row:b.row,column:b.col,cancel:false,renderTo:this};if(this.fireEvent("validateedit",f)!==false&&!f.cancel){c.set(g,f.value);delete f.cancel;this.fireEvent("afteredit",f)}}this.view.focusCell(b.row,b.col)},createFilterGridConfig:function(b){this.filterStore=new Ext.data.SimpleStore({fields:["image","field","operatorId","value","filter","filterId"],data:[],id:5});this.operatorStore=new Ext.data.SimpleStore({fields:["operatorId","operatorLabel"],data:[]});var c=new Ext.form.ComboBox({store:this.operatorStore,mode:"local",valueField:"operatorId",displayField:"operatorLabel",editable:false,triggerAction:"all",lazyRender:true,listClass:"x-combo-list-small"});var a=new Ext.grid.ColumnModel([{header:this.deleteText,renderer:this.imageRenderer,width:50,dataIndex:"image"},{header:this.filterText,renderer:this.fieldRenderer,width:150,dataIndex:"field"},{header:this.operatorText,renderer:this.operatorRenderer,width:150,dataIndex:"operatorId",editor:c},{header:this.valueText,width:150,renderer:this.valueRenderer,editable:true,dataIndex:"value"}]);c.on("select",this.completeEditLater,this);a.getCellEditorOrig=a.getCellEditor;a.filterStore=this.filterStore;a.getCellEditor=function(e,g){if(e==3){var f=this.filterStore.getAt(g).get("filter");var d=f.getOperator();return(d.getEditor())}return(this.getCellEditorOrig(e,g))};b.store=this.filterStore;b.colModel=a;b.cm=a;b.clicksToEdit=1;b.autoExpandColumn=a.getColumnId("3");b.enableColumnHide=false;b.enableColumnMove=false;b.enableColumnResize=false;b.elements="body, tbar";if(b.tbar==undefined){b.tbar=[]}b.tbar.push(this.fieldCombo);b.tbar.push("-");b.tbar.push(this.logicOpeCombo);return(b)},completeEditLater:function(){var c=this.getColumnModel().getCellEditor(2);var b=c.completeEdit;var a=new Ext.util.DelayedTask(b,c);a.delay(0)},populateFilterStore:function(){this.filterStore.removeAll();for(var a=0;a<this.getFilterModel().getAllElementaryFilters().length;a++){this.onFilterAdded(this.getFilterModel(),this.getFilterModel().getAllElementaryFilters()[a])}},createFieldCombo:function(){this.fieldStore=new Ext.data.SimpleStore({fields:["fieldId","label"],data:[],id:0});var a=this.getFilterModel().getFieldManager().getAllFields();this.addFields(a);this.fieldCombo=new Ext.form.ComboBox({emptyText:this.comboText,displayField:"label",valueField:"fieldId",store:this.fieldStore,mode:"local",triggerAction:"all",selectOnFocus:true,typeAhead:true,editable:true});this.fieldCombo.on("select",this.addFilter,this)},createLogicOpeCombo:function(){var a=new Ext.data.SimpleStore({fields:["label","value"],data:[[this.logicOpeAndText,Ext.ux.netbox.core.CompositeFilter.AND],[this.logicOpeOrText,Ext.ux.netbox.core.CompositeFilter.OR]]});this.logicOpeCombo=new Ext.form.ComboBox({displayField:"label",valueField:"value",store:a,mode:"local",triggerAction:"all",selectOnFocus:true,editable:false,value:Ext.ux.netbox.core.CompositeFilter.AND});this.logicOpeCombo.on("select",this.chgLogicOpe,this)},setLogicOpeCombo:function(){var a=this.getFilterModel().getFilter();if(a instanceof Ext.ux.netbox.core.CompositeFilter){this.logicOpeCombo.setValue(a.getLogicalOperator())}},addFields:function(b){var a=[];for(var c=0;c<b.length;c++){a.push([b[c].getId(),b[c].getLabel()])}this.fieldStore.loadData(a,true);this.fieldStore.sort("label","ASC")},removeFields:function(c){var a=c.getId();var b=this.fieldStore.getById(a);this.fieldStore.remove(b)},addFilter:function(d,a,b){var c=this.getFilterModel().addElementaryFilterByFieldId(a.id);this.fieldCombo.clearValue();this.filterStore.indexOfId(c);this.startEditing(this.filterStore.indexOfId(c),3)},chgLogicOpe:function(d,a,c){var b=a.get("value");this.getFilterModel().setLogicalOperator(b);this.getFilterModel().each(function(e){if(e instanceof Ext.ux.netbox.core.CompositeFilter&&e.getLogicalOperator()!=b){e.setLogicalOperator(b)}})},removeFilter:function(b,f,d,e){if(d==0){var a=b.getStore().getAt(f);var c=a.get("filter");this.getFilterModel().removeElementaryFilterById(c.getId())}},updateOperatorStore:function(d){if(d.column==2){var c=d.record.get("field");var a=[];for(var b=0;b<c.getAvailableOperators().length;b++){a.push([c.getAvailableOperators()[b].getId(),c.getAvailableOperators()[b].getLabel().escHtml()])}this.operatorStore.loadData(a,false)}},updateFilter:function(d){if(d.column==2){var b=d.record.get("filter");var a=d.record.get("operatorId");b.setOperator(a)}else{if(d.column==3){var b=d.record.get("filter");try{b.setValues(d.record.get("value"))}catch(f){var c=this.filterStore.getById(b.getId());c.set("value",b.getValues())}}}this.filterStore.commitChanges()},updateFilterOperator:function(b){var a=this.filterStore.getById(b.getId());if(a.get("operatorId")!=b.getOperator().getId()){a.set("operatorId",b.getOperator().getId())}this.filterStore.commitChanges()},updateFilterValues:function(b){var a=this.filterStore.getById(b.getId());if(Ext.util.JSON.encode(a.get("value"))!=Ext.util.JSON.encode(b.getValues())){a.set("value",b.getValues())}this.filterStore.commitChanges()},imageRenderer:function(e,d,a,f,c,b){return('<img class="x-menu-item-icon x-icon-delete" style="position: static; cursor: pointer" src="'+Ext.BLANK_IMAGE_URL+'"/>')},fieldRenderer:function(e,d,a,f,c,b){return(e.getLabel())},operatorRenderer:function(f,e,a,g,d,c){var b=a.get("filter").getField().getAvailableOperatorById(f);return(b.getLabel())},valueRenderer:function(e,d,a,f,c,b){return(a.get("filter").getOperator().render(e))}});Ext.reg("dynamicFilter",Ext.ux.netbox.core.DynamicFilterModelView);String.prototype.escHtml=function(){var b,c={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;"};var a=this;for(b in c){a=a.replace(new RegExp(b,"g"),c[b])}return a};Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.StaticFilterModelView=function(a){this.filterModel=a.filterModel;this.ratio=60;this.rowSize=27;if(a.rowSize!==undefined){this.rowSize=a.rowSize}if(a.ratio){this.ratio=a.ratio}a=this.createConfig(a);this.colsNumber=a.colsNumber;this.panelColumns=[];for(var b=0;b<this.colsNumber;b++){this.panelColumns[b]=null}Ext.ux.netbox.core.StaticFilterModelView.superclass.constructor.call(this,a);if(this.rendered){this.populateFields()}else{this.on("render",this.populateFields,this)}this.filterModel.getFieldManager().on("fieldAdded",this.addField,this);this.filterModel.getFieldManager().on("fieldRemoved",this.removeField,this);this.filterModel.on("elementaryFilterAdded",this.elementaryFilterAdded,this);this.filterModel.on("elementaryFilterRemoved",this.elementaryFilterRemoved,this);this.filterModel.on("filterChanged",this.populateFilters,this);this.fieldPanelMapping=new Ext.util.MixedCollection();this.filterEditorsMapping={};this.managedFilters=new Ext.util.MixedCollection();if(this.rendered){this.populateFilters()}else{this.on("render",this.populateFilters,this)}};Ext.extend(Ext.ux.netbox.core.StaticFilterModelView,Ext.form.FormPanel,{createConfig:function(b){b.layout="form";b.frame="true";if(!b.colsNumber){b.colsNumber=1}b.colsNumber=b.colsNumber*2;var e=1/(b.colsNumber);var a=[];var f=function(h,i){this.panelColumns[i]=h};for(var c=0;c<b.colsNumber;c++){var d;if(c%2===0){d=e*(this.ratio/100)*2}else{if(c%2===1){d=e*(1-(this.ratio/100))*2}}var g={columnWidth:d,layout:"anchor",items:null,plugins:{init:f.createDelegate(this,[c],true)}};a.push(g);if(c%2==1){a.push({width:15,style:"height: 1px"})}}b.items=[{layout:"column",items:a,anchor:"100% 100%"}];return(b)},getEditorPanelNumber:function(e){var a=this.fieldPanelMapping.get(e.getId());var d=a.getEditorComponent();var b=a.getOperatorCombo();var f=-1;for(var c=1;c<this.panelColumns.length;c+=2){if(this.panelColumns[c].items.contains(d)){f=c;break}}return(f)},elementaryFilterRemoved:function(f,d){var g=d.getField();var h=this.getEditorPanelNumber(g);var a=this.fieldPanelMapping.get(g.getId());var e=a.getEditorComponent();var c=a.getOperatorCombo();if(e.items&&e.items.getCount()>0){var b=e.items.first();e.remove(b)}if(c.getValue()!==""){c.clearValue()}d.un("operatorChanged",this.operatorChanged,this);d.un("valueChanged",this.valueChanged,this);this.managedFilters.remove(d)},elementaryFilterAdded:function(c,a){var f=a.getField();var g=this.getEditorPanelNumber(f);var j=this.fieldPanelMapping.get(f.getId());var h=j.getEditorComponent();var b=j.getOperatorCombo();b.setValue(a.getOperator().getId());var e=a.getOperator().getEditor(false);this.changeEditor(e,j);var i=j.getEditor().field;if(h.items&&h.items.getCount()>0){var d=h.items.first();h.remove(d)}this.addFormField(i,h);j.getEditor().editing=true;j.getEditor().setValue(a.getValues());j.getEditor().startValue=a.getValues();a.on("operatorChanged",this.operatorChanged,this);a.on("valueChanged",this.valueChanged,this);this.managedFilters.add(a)},changeEditor:function(b,a){if(a.getEditor()){a.getEditor().un("complete",this.editingCompleted,this);a.getEditor().field.un("change",this.editingCompleted,this)}a.setEditor(b);a.getEditor().on("complete",this.editingCompleted,this);a.getEditor().field.on("change",this.editingCompleted,this)},addFormField:function(b,a){a.add(b);a.doLayout()},operatorChanged:function(a,b){var e=a.getField();var i=this.fieldPanelMapping.get(e.getId());var j=i.getOperatorCombo();var g=i.getEditorComponent();if(j.getValue()!=b.getId()){j.setValue(b.getId())}var f=this.getEditorPanelNumber(e);var d=a.getOperator().getEditor(false);this.changeEditor(d,i);var h=i.getEditor().field;var c=g.items.first();g.remove(c);this.addFormField(h,g);i.getEditor().editing=true;i.getEditor().startValue=a.getValues();i.getEditor().setValue(a.getValues())},valueChanged:function(c,d){var a=this.fieldPanelMapping.get(c.getField().getId());var b=a.getEditor();b.setValue(d)},editingCompleted:function(b){var c=function(f){if(f.getEditor()&&(f.getEditor()==b||f.getEditor().field==b)){return(true)}return(false)};var a=this.fieldPanelMapping.find(c);var e=a.getField();var d=this.filterModel.getElementaryFiltersByFieldId(e.getId());if(Ext.util.JSON.encode(d[0].getValues())!==Ext.util.JSON.encode(a.getEditor().getValue())){d[0].setValues(a.getEditor().getValue())}a.getEditor().editing=true},populateFields:function(){var a=this.filterModel.getFieldManager().getAllFields();for(var b=0;b<a.length;b++){this.addField(a[b])}},removeField:function(f){var g=this.getEditorPanelNumber(f);var a=this.fieldPanelMapping.get(f.getId());var e=a.getEditorComponent();var c=a.getOperatorCombo();var b=e.items.first();e.remove(b,false);var d=c.getEl().up(".x-form-item");this.panelColumns[g-1].remove(c,true);d.remove();this.panelColumns[g].doLayout();this.panelColumns[g-1].doLayout();this.fieldPanelMapping.removeKey(f.getId())},operatorSelected:function(b,f,g){var h=function(i){if(i.getOperatorCombo()==b){return(true)}return(false)};var k=this.fieldPanelMapping.find(h);var j=k.getField();var a=this.filterModel.getElementaryFiltersByFieldId(j.getId());if(f.get("operatorId")===""){b.clearValue();if(a.length>0){this.filterModel.removeElementaryFilterById(a[0].getId())}return}if(f.get("operatorId")!==""&&a.length==0){var c=this.filterModel.addElementaryFilterByFieldId(j.getId());a.push(this.filterModel.getElementaryFilterById(c))}var e=j.getAvailableOperators();for(var d=0;d<e.length;d++){if(e[d].getId()===f.get("operatorId")){a[0].setOperator(e[d])}}return},populateFilters:function(){while(this.managedFilters.getCount()>0){var c=this.managedFilters.last();this.elementaryFilterRemoved(this.filterModel,c)}var a=this.filterModel.getAllElementaryFilters();for(var b=0;b<a.length;b++){this.elementaryFilterAdded(this.filterModel,a[b])}},addField:function(e){var b={};if(this.initialConfig.labelWidth!==undefined){b.labelWidth=this.initialConfig.labelWidth}if(this.initialConfig.hideLabels!==undefined){b.hideLabels=this.initialConfig.hideLabels}if(this.initialConfig.itemCls!==undefined){b.itemCls=this.initialConfig.itemCls}if(this.initialConfig.labelAlign!==undefined){b.labelAlign=this.initialConfig.labelAlign}if(this.initialConfig.labelPad!==undefined){b.labelPad=this.initialConfig.labelPad}var a=new Ext.ux.netbox.core.ElementaryFilterCfg(e,this.rowSize,b);var d=null;var f=0;for(var c=0;c<this.panelColumns.length;c+=2){if(!this.panelColumns[c].items){d=0;f=c;break}if(d==null||this.panelColumns[c].items.length<d){d=this.panelColumns[c].items.length;f=c}}this.fieldPanelMapping.add(e.getId(),a);a.getOperatorCombo().on("select",this.operatorSelected,this);b.layout="form";b.anchor="100%";b.items=[a.getOperatorCombo()];b.height=this.rowSize;this.panelColumns[f].add(b);this.panelColumns[f].doLayout();this.panelColumns[f+1].add(a.getEditorComponent());this.panelColumns[f+1].doLayout()}});Ext.reg("staticFilter",Ext.ux.netbox.core.StaticFilterModelView);Ext.ux.netbox.core.ElementaryFilterCfg=function(g,e,b){this.rowSize=e;var a=[["","<PRE> </PRE>"]];this.labelAlign=b.labelAlign;this.field=g;for(var d=0;d<g.getAvailableOperators().length;d++){a.push([g.getAvailableOperators()[d].getId(),g.getAvailableOperators()[d].getLabel()])}var h=new Ext.data.SimpleStore({fields:["operatorId","operatorLabel"],data:a});var c={store:h,mode:"local",valueField:"operatorId",displayField:"operatorLabel",editable:false,triggerAction:"all",lazyRender:true,fieldLabel:g.getLabel(),width:105,tpl:'<tpl for="."><div class="x-combo-list-item">{[values.operatorLabel=="<PRE> </PRE>" ? values.operatorLabel : values.operatorLabel.escHtml()]}</div></tpl>'};if(Ext.isSafari){c.anchor="90%"}else{c.anchor="98%"}c.anchor+=" 100%";this.operatorCombo=new Ext.form.ComboBox(c);var f=Ext.apply({},b);f.layout="form";f.height=this.rowSize;f.labelWidth=1;f.labelPad=1;if(this.labelAlign!=="top"){f.hideLabels=true}this.editorComponent=new Ext.Panel(f)};Ext.ux.netbox.core.ElementaryFilterCfg.prototype={getOperatorCombo:function(){return(this.operatorCombo)},getEditorComponent:function(){return(this.editorComponent)},getField:function(){return(this.field)},setEditor:function(a){this.editor=a;if(Ext.isSafari){this.editor.field.anchor="90%"}else{this.editor.field.anchor="98%"}this.editor.field.labelSeparator="";if(this.labelAlign=="top"){if(Ext.isIE){this.editor.field.fieldLabel="<pre> </pre>"}else{this.editor.field.labelStyle="white-space: pre;";this.editor.field.fieldLabel=" "}}else{this.editor.field.fieldLabel=""}},getEditor:function(){return(this.editor)}};Ext.namespace("Ext.ux.netbox");Ext.ux.netbox.FilterEditor=function(b,a){Ext.ux.netbox.FilterEditor.superclass.constructor.call(this,b,a)};Ext.extend(Ext.ux.netbox.FilterEditor,Ext.grid.GridEditor,{startEdit:function(b,c){if(this.editing){this.completeEdit()}this.boundEl=Ext.get(b);var a=c!==undefined?c:this.boundEl.dom.innerHTML;if(!this.rendered){this.render(this.parentEl||document.body)}if(this.fireEvent("beforestartedit",this,this.boundEl,a)===false){return}this.startValue=a;this.setValue(a);if(this.autoSize){var d=this.boundEl.getSize();switch(this.autoSize){case"width":this.setSize(d.width,"");break;case"height":this.setSize("",d.height);break;default:this.setSize(d.width,d.height)}}this.el.alignTo(this.boundEl,this.alignment);this.editing=true;this.show()},completeEdit:function(a){if(!this.editing){return}var b=this.getValue();if(this.revertInvalid!==false&&!this.field.isValid()){b=this.startValue;this.cancelEdit(true)}if(Ext.util.JSON.encode(b)===Ext.util.JSON.encode(this.startValue)&&this.ignoreNoChange){this.editing=false;this.hide();return}if(this.fireEvent("beforecomplete",this,b,this.startValue)!==false){this.editing=false;if(this.updateEl&&this.boundEl){this.boundEl.update(b)}if(a!==true){this.hide()}this.fireEvent("complete",this,b,this.startValue)}}});Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.AvailableValuesEditor=function(a,b){if(b==undefined){b={}}var c="local";if(b.remote==true){c="remote"}if(b.multiSelect==undefined){b.multiSelect=false}this.fieldCombo=new Ext.ux.Andrie.Select({store:a,displayField:"label",valueField:"value",selectOnFocus:true,mode:c,triggerAction:"all",selectOnFocus:true,typeAhead:true,multiSelect:b.multiSelect,minChars:0});if(!b.multiSelect){this.fieldCombo.on("select",this.completeEditLater,this)}if(b.forceReload){this.fieldCombo.on("beforequery",function(d){d.combo.lastQuery=null})}if(b.caseSensitive){this.caseSensitive=true}else{this.caseSensitive=false}Ext.ux.netbox.core.AvailableValuesEditor.superclass.constructor.call(this,this.fieldCombo,b);this.store=a};Ext.extend(Ext.ux.netbox.core.AvailableValuesEditor,Ext.ux.netbox.FilterEditor,{setValue:function(c){var e=[];var d=[];var a="";if(c!=undefined&&c!=null&&Ext.type(c)=="array"){if(c.length>0){for(var b=0;b<c.length&&((this.fieldCombo.multiSelect)||b<1);b++){e.push(c[b].value);if(c[b].label!=undefined){d.push(c[b].label)}else{d.push(c[b].value)}}}}this.originalValue=c;Ext.ux.netbox.core.AvailableValuesEditor.superclass.setValue.call(this,e);Ext.form.ComboBox.superclass.setValue.call(this.fieldCombo,d.join(","));this.fieldCombo.value=e;this.fieldCombo.rawValueArray=d},completeEditLater:function(){var a=new Ext.util.DelayedTask(this.completeEdit,this);a.delay(0)},getValue:function(){var e=Ext.ux.netbox.core.AvailableValuesEditor.superclass.getValue.call(this);if(Ext.type(e)=="string"){e=e.split(",")}var d=[];for(var c=0;c<e.length;c++){var b=this.store.find("value",e[c],0,false,this.caseSensitive);if(b<0){continue}var a=this.store.getAt(b);d.push({label:a.get("label"),value:e[c]})}if((e.length>0&&e[0]!=="")&&d.length==0){return(this.originalValue)}else{return d}}});Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.TextValuesEditor=function(b,a){if(b==undefined){b=new Ext.form.TextField()}Ext.ux.netbox.core.TextValuesEditor.superclass.constructor.call(this,b,a)};Ext.extend(Ext.ux.netbox.core.TextValuesEditor,Ext.ux.netbox.FilterEditor,{setValue:function(a){var b;if(a!==undefined&&a!==null&&Ext.type(a)==="array"){if(a.length==0){b=""}else{if(a[0].value!==undefined){b=a[0].value}else{b=a[0]}}}else{b=""}Ext.ux.netbox.FilterEditor.superclass.setValue.call(this,b)},getValue:function(){var a=Ext.ux.netbox.FilterEditor.superclass.getValue.call(this);if(a===""){return([])}else{a=[{label:a,value:a}]}return(a)}});Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.RangeField=function(a){this.textCls=a.textCls;this.fromConfig=a.fromConfig;this.toConfig=a.toConfig;if(a.minListWidth){this.minListWidth=a.minListWidth}else{this.minListWidth=100}if(a.fieldSize){this.defaultAutoCreate.size=a.fieldSize}Ext.ux.netbox.core.RangeField.superclass.constructor.call(this,a)};Ext.extend(Ext.ux.netbox.core.RangeField,Ext.form.TriggerField,{fromText:"from",toText:"to",defaultAutoCreate:{tag:"input",type:"text",size:"20",autocomplete:"off"},editable:false,rangeValue:null,initComponent:function(){Ext.ux.netbox.core.RangeField.superclass.initComponent.call(this)},onTriggerClick:function(){if(this.disabled){return}if(this.menu==null){this.menu=new Ext.ux.netbox.core.RangeMenu(this.textCls,this.fromConfig,this.toConfig,this.validate.createDelegate(this))}if(this.menuListeners){this.menu.on(Ext.apply({},this.menuListeners,{scope:this}))}this.menu.setWidth(this.getWidth());this.menu.show(this.getEl());this.menu.setValue(this.rangeValue)},getValue:function(){if(this.menu!==undefined){this.rangeValue=this.menu.getValue()}return(this.rangeValue)},setValue:function(a){valueFrom=a[0]!==undefined?a[0]:{value:"",label:""};valueTo=a[1]!==undefined?a[1]:{value:"",label:""};formattedValue=this.fromText+": "+valueFrom.label+", "+this.toText+": "+valueTo.label;Ext.ux.netbox.core.RangeField.superclass.setValue.call(this,formattedValue);this.rangeValue=a;if(this.menu!=null){this.menu.setValue(this.rangeValue)}},markInvalid:function(a){Ext.ux.netbox.core.RangeField.superclass.markInvalid.call(this,a);if(this.menu){this.menu.markInvalid(a)}},clearInvalid:function(){Ext.ux.netbox.core.RangeField.superclass.clearInvalid.call(this);if(this.menu){this.menu.clearInvalidFields()}},validateBlur:function(a){return(this.menu&&this.menu.getEl()&&!this.menu.getEl().contains(a.target))}});Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.RangeMenu=function(a,b,c,d){if(a===undefined){a=Ext.form.TextField;a.anchor="100%"}this.editorFrom=new a(b);this.editorTo=new a(c);this.editorFrom.validate=d;this.editorTo.validate=d;this.editorFrom.fieldLabel=this.fromText;this.editorTo.fieldLabel=this.toText;this.initComponent();Ext.ux.netbox.core.RangeMenu.superclass.constructor.apply(this,arguments)};Ext.extend(Ext.ux.netbox.core.RangeMenu,Ext.menu.Menu,{fromText:"from",toText:"to",hideOnClick:false,layout:"form",labelWidth:38,style:{"background-image":"none"},layoutConfig:{doAutoSize:function(){}},initComponent:function(){Ext.apply(this,{items:[this.editorFrom,this.editorTo]});Ext.ux.netbox.core.RangeMenu.superclass.initComponent.call(this);this.addEvents({update:true});var a=this.items.items;for(var b=0;b<a.length;b++){a[b].on("keyup",this.onKeyUp,this)}},setValue:function(a){var c="";var b="";if(a.length==2){c=a[0].label;b=a[1].label}else{if(a.length==1){c=a[0].label}}if(b===""){this.editorTo.setRawValue("")}else{this.editorTo.setValue(b)}if(c===""){this.editorFrom.setRawValue("")}else{this.editorFrom.setValue(c)}this.fireEvent("update",this)},onKeyUp:function(a){if(a.getKey()==a.ENTER&&this.isValid()){this.hide(true);return}},getValue:function(){var a=[{value:this.editorFrom.getValue(),label:this.editorFrom.getValue()},{value:this.editorTo.getValue(),label:this.editorTo.getValue()}];return a},isValid:function(){return(this.editorFrom.isValid()&&this.editorTo.isValid())},markInvalid:function(a){this.editorFrom.markInvalid(a);this.editorTo.markInvalid(a)},clearInvalidFields:function(){this.editorFrom.clearInvalid();this.editorTo.clearInvalid()}});Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.LocalStoreFilterResolver=function(b,a){this.mapping=null;if(a==undefined){this.mapping={NUMBER_EQUAL:{fn:this.filterNumberEqual,scope:this},NUMBER_NOT_EQUAL:{fn:this.filterNumberDifferent,scope:this},NUMBER_GREATER:{fn:this.filterNumberGreater,scope:this},NUMBER_GREATER_OR_EQUAL:{fn:this.filterNumberGreaterOrEqual,scope:this},NUMBER_LESS:{fn:this.filterNumberLess,scope:this},NUMBER_LESS_OR_EQUAL:{fn:this.filterNumberLessOrEqual,scope:this},NUMBER_RANGE:{fn:this.filterNumberRange,scope:this},STRING_EQUAL:{fn:this.filterStringEquals,scope:this},STRING_DIFFERENT:{fn:this.filterStringDifferent,scope:this},STRING_CONTAINS:{fn:this.filterStringContains,scope:this},STRING_DOESNT_CONTAIN:{fn:this.filterStringDoesntContains,scope:this},STRING_STARTS_WITH:{fn:this.filterStringStartsWith,scope:this},STRING_ENDS_WITH:{fn:this.filterStringEndsWith,scope:this},STRING_LIST:{fn:this.filterList,scope:this},STRING_NOT_IN_LIST:{fn:this.filterNotInList,scope:this},DATE_EQUAL:{fn:this.filterDateEqual,scope:this},DATE_GREATER:{fn:this.filterDateGreater,scope:this},DATE_GREATER_OR_EQUAL:{fn:this.filterDateGreaterOrEqual,scope:this},DATE_LESS:{fn:this.filterDateLess,scope:this},DATE_LESS_OR_EQUAL:{fn:this.filterDateLessOrEqual,scope:this},DATE_RANGE:{fn:this.filterDateRange,scope:this},DATE_PERIOD:{fn:this.filterDatePeriod,scope:this}}}this.filterModel=b};Ext.ux.netbox.core.LocalStoreFilterResolver.prototype={escapeRegExp:function(a){return a.replace(/([.*+?^${}()|[\]\/\\])/g,"\\$1")},calcolateValue:function(a){if(a.length==0){return("")}else{return(a[0].value)}},calcolateValueNumber:function(a){if(a.length==0){throw ("Not a number")}else{var b=parseFloat(a[0].value);if(isNaN(b)){throw ("Not a number")}return(b)}},calcolateValueDate:function(b){if(b.length==0){throw ("Not a date")}else{var a=Date.parseDate(b[0].value,"Y-m-d H:i:s");if(!a){throw ("Not a date")}return(a)}},filterStringEquals:function(a,c,b){return(a.get(b)===this.calcolateValue(c))},filterStringDifferent:function(a,c,b){return(!this.filterStringEquals(a,c,b))},filterList:function(a,d,c){for(var b=0;b<d.length;b++){if(this.filterStringEquals(a,[d[b]],c)){return(true)}}return(false)},filterNotInList:function(a,c,b){return(!this.filterList(a,c,b))},filterStringStartsWith:function(a,d,b){var e=this.escapeRegExp(this.calcolateValue(d));var c=new RegExp("^"+e,"");return(a.get(b).match(c)!==null)},filterStringEndsWith:function(a,d,b){var e=this.escapeRegExp(this.calcolateValue(d));var c=new RegExp(e+"$","");return(a.get(b).match(c)!==null)},filterStringContains:function(a,d,b){var e=this.escapeRegExp(this.calcolateValue(d));var c=new RegExp(".*"+e+".*","");return(a.get(b).match(c)!==null)},filterStringDoesntContains:function(a,c,b){return(!this.filterStringContains(a,c,b))},filterNumberEqual:function(a,c,b){var f;try{f=this.calcolateValueNumber(c)}catch(d){return(false)}return(a.get(b)===f)},filterNumberDifferent:function(a,c,b){return(!this.filterNumberEqual(a,c,b))},filterNumberGreater:function(a,c,b){var f;try{f=this.calcolateValueNumber(c)}catch(d){return(false)}return(a.get(b)>f)},filterNumberLessOrEqual:function(a,c,b){var f;try{f=this.calcolateValueNumber(c)}catch(d){return(false)}return(!this.filterNumberGreater(a,c,b))},filterNumberLess:function(a,c,b){var f;try{f=this.calcolateValueNumber(c)}catch(d){return(false)}return(a.get(b)<f)},filterNumberGreaterOrEqual:function(a,c,b){var f;try{f=this.calcolateValueNumber(c)}catch(d){return(false)}return(!this.filterNumberLess(a,c,b))},filterNumberRange:function(b,e,d){if(e.length!=2){return(false)}var a=this.filterNumberGreaterOrEqual(b,[e[0]],d);var c=this.filterNumberLessOrEqual(b,[e[1]],d);return(a&&c)},filterDateEqual:function(a,d,c){var b;try{b=this.calcolateValueDate(d)}catch(f){return(false)}return(a.get(c).getTime()==b.getTime())},filterDateGreater:function(a,d,c){var b;try{b=this.calcolateValueDate(d)}catch(f){return(false)}return(a.get(c).getTime()>b.getTime())},filterDateLessOrEqual:function(a,c,b){var f;try{f=this.calcolateValueDate(c)}catch(d){return(false)}return(!this.filterDateGreater(a,c,b))},filterDateLess:function(a,d,c){var b;try{b=this.calcolateValueDate(d)}catch(f){return(false)}return(a.get(c).getTime()<b.getTime())},filterDateGreaterOrEqual:function(a,d,c){var b;try{b=this.calcolateValueDate(d)}catch(f){return(false)}return(!this.filterDateLess(a,d,c))},filterDateRange:function(b,e,d){if(e.length!=2){return(false)}var a=this.filterDateGreaterOrEqual(b,[e[0]],d);var c=this.filterDateLessOrEqual(b,[e[1]],d);return(a&&c)},filterDatePeriod:function(b,f,e){if(f.length!=1){return(false)}var d=new Date();upperValue={label:d.format("Y-m-d H:i:s"),value:d.format("Y-m-d H:i:s")};var c;if(f[0].value==="LAST_YEAR"){c=d.add(Date.YEAR,-1)}else{if(f[0].value==="LAST_MONTH"){c=d.add(Date.MONTH,-1)}else{if(f[0].value==="LAST_WEEK"){c=d.add(Date.DAY,-7)}else{if(f[0].value==="LAST_DAY"){c=d.add(Date.DAY,-1)}else{if(f[0].value==="LAST_HOUR"){c=d.add(Date.HOUR,-1)}else{if(f[0].value==="LAST_QUARTER"){c=d.add(Date.MINUTE,-15)}else{return(false)}}}}}}var a={label:c.format("Y-m-d H:i:s"),value:c.format("Y-m-d H:i:s")};return(this.filterDateRange(b,[a,upperValue],e))},apply:function(a){a.filterBy(this.filter,this)},filter:function(a,f,e){if(e==undefined){e=this.filterModel.getFilterObj()}if(e==null){return(true)}if(e.operatorId!=undefined){var d=this.mapping[e.operatorId].fn;var c=this.mapping[e.operatorId].scope;if(c===undefined||c===null){c=window}toReturn=d.call(c,a,e.values,e.fieldId);return(toReturn)}else{var b=this.filter(a,f,e.left);if(b===true&&e.logicalOperator===Ext.ux.netbox.core.CompositeFilter.OR){return true}if(b===false&&e.logicalOperator===Ext.ux.netbox.core.CompositeFilter.AND){return(false)}b=this.filter(a,f,e.right);return(b)}}};Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.QuickFilterModelView=function(a){this.addEvents({filterChanged:true});this.filterModel=a.filterModel;this.quickFilterItem=null;this.removeFilterItem=null;this.fieldsOptions=a.fieldsOptions;if(a.duplicatedElementaryFiltersAllowed===undefined){this.duplicatedElementaryFiltersAllowed=false}else{this.duplicatedElementaryFiltersAllowed=a.duplicatedElementaryFiltersAllowed}if(a.isStatic===undefined){this.isStatic=false}else{this.isStatic=a.isStatic}this.stringOperDefault=["STRING_EQUAL","STRING_DIFFERENT"];this.numberOperDefault=["NUMBER_EQUAL","NUMBER_NOT_EQUAL","NUMBER_GREATER","NUMBER_GREATER_OR_EQUAL","NUMBER_LESS","NUMBER_LESS_OR_EQUAL"];this.dateOperDefault=["DATE_EQUAL","DATE_GREATER","DATE_GREATER_OR_EQUAL","DATE_LESS","DATE_LESS_OR_EQUAL"]};Ext.extend(Ext.ux.netbox.core.QuickFilterModelView,Ext.util.Observable,{quickFilterText:"QuickFilter",removeText:"Remove filter",removeAllText:"Remove all",filterIsToShow:function(b,p,f){if(f==-1||this.getField(b,f)==null){return false}else{var c=[];var m=this.getField(b,f);var g;if(this.fieldsOptions){for(var k=0;k<this.fieldsOptions.length;k++){if(this.fieldsOptions[k].id===m.getId()&&this.fieldsOptions[k].operators){g=this.fieldsOptions[k].operators}}}if(!g){if(m instanceof Ext.ux.netbox.string.StringField||m instanceof Ext.ux.netbox.string.EnumField){g=this.stringOperDefault}else{if(m instanceof Ext.ux.netbox.number.NumberField){g=this.numberOperDefault}else{if(m instanceof Ext.ux.netbox.date.DateField){g=this.dateOperDefault}else{var l=m.getAvailableOperators();for(var k=0;k<l.length;k++){g.push(l[k].getId())}}}}}for(var k=0;k<g.length;k++){var o=true;var d=m.getAvailableOperatorById(g[k]);var e={text:Ext.util.Format.htmlEncode(d.getLabel()),handler:this.setFilter.createDelegate(this,[b,p,f,m.getId(),d.getId()],false)};var a=this.filterModel.getElementaryFiltersByFieldId(m.getId());var n=this.getValues(b,p,f,m.getId(),d.getId());for(var h=0;h<a.length;h++){if(a[h].getOperator().getId()===d.getId()&&Ext.util.JSON.encode(a[h].getValues())===Ext.util.JSON.encode(n)){o=false}}if(d.validate(n)!==true){o=false}if(o){c.push(e)}}if(c.length>0){this.quickFilterItem.setSubMenu(new Ext.menu.Menu({items:c}));return true}else{return false}}},getValues:function(a,n,d,h,j){var g=a.getStore().getAt(n);var c=g.get(a.getColumnModel().getDataIndex(d));var m;var f;if(this.fieldsOptions){for(var e=0;e<this.fieldsOptions.length;e++){if(this.fieldsOptions[e].id===h&&this.fieldsOptions[e].getterFn){m=this.fieldsOptions[e].getterFn;if(this.fieldsOptions[e].getterScope){f=this.fieldsOptions[e].getterScope}}}}if(!m){var k=this.getField(a,d);var b=k.getAvailableOperatorById(j);if(b instanceof Ext.ux.netbox.date.DateOperator&&c instanceof Date){m=this.getValuesDate}else{m=this.getValuesOther}}if(!f){f=this}var l=m.call(f,c,h,j,a,n,d);return l},getValuesOther:function(b,f,g,a,i,c){var d=a.getColumnModel().getRenderer(c);var e=a.getStore().getAt(i);var h=d(b,{},e,i,c,a.getStore());return([{label:h,value:b}])},getValuesDate:function(d,c,b,e,h,f){var g=this.filterModel.getFieldManager().getFieldById(c);var a=g.getAvailableOperatorById(b);return([{label:d.format(a.getFormat()),value:d.format("Y-m-d H:i:s")}])},setFilter:function(a,k,c,g,h){var j=this.getValues(a,k,c,g,h);var f={fieldId:g,operatorId:h,values:j};var e=true;if(!this.duplicatedElementaryFiltersAllowed){var b=this.filterModel.getElementaryFiltersByFieldId(g);for(var d=0;d<b.length;d++){if(b[d].getOperator().getId()===h&&Ext.util.JSON.encode(b[d].getValues())===Ext.util.JSON.encode(j)){e=false;break}}}if(this.isStatic){var b=this.filterModel.getElementaryFiltersByFieldId(g);for(var d=0;d<b.length;d++){this.filterModel.removeElementaryFilterById(b[d].getId())}}if(e){this.filterModel.addElementaryFilter(f);this.fireEvent("filterChanged")}},getFilterMenu:function(){if(this.quickFilterItem==null){this.quickFilterItem=new Ext.ux.netbox.ContainerMenuItem({text:this.quickFilterText,isToShow:this.filterIsToShow,scope:this})}return this.quickFilterItem},getRemoveFilterMenu:function(){if(this.removeFilterItem==null){this.removeFilterItem=new Ext.ux.netbox.ContainerMenuItem({text:this.removeText,isToShow:this.removeFilterIsToShow,scope:this})}return this.removeFilterItem},removeFilterIsToShow:function(a,k,e){var c=this.filterModel.getAllElementaryFilters();if(c.length>0){var b=[];for(var f=0;f<c.length;f++){var h=c[f].getField().getLabel()+" "+c[f].getOperator().getLabel()+" "+c[f].getOperator().render(c[f].getValues());var j="";if(c[f].isValid()!==true){j="x-icon-invalid"}var d={iconCls:j,text:h,handler:this.removeFilterById.createDelegate(this,[c[f].getId()],false),isToShow:function(){return(true)}};b.push(d)}var g={text:this.removeAllText,handler:this.removeAllFilters,scope:this,isToShow:function(){return(true)}};b.push(g);this.removeFilterItem.setSubMenu(new Ext.menu.Menu({items:b}));return true}else{return false}},removeAllFilters:function(){this.filterModel.setFilterObj(null);this.fireEvent("filterChanged")},removeFilterById:function(a){this.filterModel.removeElementaryFilterById(a);this.fireEvent("filterChanged")},getField:function(a,b){var c=a.getColumnModel().getDataIndex(b);var d=this.filterModel.getFieldManager().getFieldById(c);return d}});Ext.namespace("Ext.ux.netbox.core");Ext.ux.netbox.core.FilterHeaderPlugin=function(a){this.filterModel=a};Ext.ux.netbox.core.FilterHeaderPlugin.prototype={filterCls:"ux-filtered-column",init:function(a){this.grid=a;a.on("render",this.onRender,this)},onRender:function(){this.grid.getView().on("refresh",this.onRefresh,this);this.updateColumnHeadings(this.grid.getView())},onRefresh:function(a){this.updateColumnHeadings(a)},updateColumnHeadings:function(b){if(!b||!b.mainHd){return}var f=b.mainHd.select("td").removeClass(this.filterCls);for(var d=0,a=b.cm.config.length;d<a;d++){var e=this.filterModel.getElementaryFiltersByFieldId(b.cm.config[d].dataIndex);for(var c=0;c<e.length;c++){if(e[c].isValid()===true){f.item(d).addClass(this.filterCls);break}}}}};Ext.namespace("Ext.ux.netbox");Ext.ux.netbox.ContainerMenuItem=function(a){Ext.ux.netbox.ContainerMenuItem.superclass.constructor.call(this,a)};Ext.extend(Ext.ux.netbox.ContainerMenuItem,Ext.menu.Item,{getSubMenu:function(){return this.menu},setSubMenu:function(a){this.menu=Ext.menu.MenuMgr.get(a);if(this.getEl()){this.getEl().addClass("x-menu-item-arrow")}},removeSubMenu:function(){this.menu=undefined;if(this.getEl()){this.getEl().removeClass("x-menu-item-arrow")}}});Ext.namespace("Ext.ux.netbox");Ext.ux.netbox.ContextMenuManager=function(a){this.menu=a.menu};Ext.ux.netbox.ContextMenuManager.prototype={init:function(a){this.gridPanel=a;this.gridPanel.on("contextmenu",this.onContextmenu,this)},onCellcontextmenu:function(a,l,k,h,b){var d=false;if(!b){d=true;if(!(this.menu instanceof Ext.menu.Menu)){this.menu=new Ext.menu.Menu(this.menu)}b=this.menu}h.stopEvent();var g=false;for(var f=0;f<b.items.getCount();f++){var j=b.items.get(f);var n=j.initialConfig.scope?j.initialConfig.scope:window;var c;if(j.initialConfig.isToShow){c=j.initialConfig.isToShow.call(n,a,l,k,j);if(c&&j.menu){this.onCellcontextmenu(a,l,k,h,j.menu)}}else{if(!j.menu){c=(l>=0&&k>=0)}else{c=this.onCellcontextmenu(a,l,k,h,j.menu)}}if(c){j.setVisible(true);if(j.initialConfig.handler){var m=j.initialConfig.handler.createDelegate(n,[a,l,k,j],false);j.setHandler(m)}g=true}else{j.setVisible(false)}}if(g&&d){this.menu.showAt([h.getPageX(),h.getPageY()])}return g},onContextmenu:function(c){var b=c.getTarget();var f=this.gridPanel.getView().findHeaderIndex(b);if(f!==false){return}var d=-1;var a=-1;if(this.gridPanel.getView().findRowIndex(b)!==false){d=this.gridPanel.getView().findRowIndex(b)}if(this.gridPanel.getView().findCellIndex(b)!==false){a=this.gridPanel.getView().findCellIndex(b)}this.onCellcontextmenu(this.gridPanel,d,a,c)}};Ext.namespace("Ext.ux.netbox");Ext.ux.netbox.PreferenceManager=function(a){Ext.ux.netbox.PreferenceManager.superclass.constructor.call(this,a);this.addEvents({preferenceSaved:true,preferenceDeleteFailed:true,applyDefaultPreferenceFailed:true,applyPreferenceFailed:true,preferenceSaveFailed:true,preferenceDeleted:true,loadPreferencesFailed:true});this.id=a.id;this.userName=a.userName;this.setFn=a.setFn;this.getFn=a.getFn;this.fnScope=a.fnScope;this.getAllPrefURL=a.getAllPrefURL;this.applyDefaultPrefURL=a.applyDefaultPrefURL;this.loadPrefURL=a.loadPrefURL;this.savePrefURL=a.savePrefURL;this.deletePrefURL=a.deletePrefURL};Ext.extend(Ext.ux.netbox.PreferenceManager,Ext.util.Observable,{getAllPreferences:function(){if(this.store===undefined){this.store=new Ext.data.Store({proxy:new Ext.data.HttpProxy({url:this.getAllPrefURL}),baseParams:{id:this.id,userName:this.userName},reader:new Ext.data.JsonReader({root:"preferences",totalProperty:"totalCount",fields:["prefId","prefName","prefDesc",{name:"isDefault",type:"boolean"}]})});this.store.on("exception",this._loadExceptionCbk,this);this.store.setDefaultSort("prefName")}return this.store},_loadExceptionCbk:function(b,c,a){this.fireEvent("loadPreferencesFailed",a)},applyDefaultPreference:function(){Ext.Ajax.request({url:this.applyDefaultPrefURL,success:this.applyDefaultPreferenceCbk.createDelegate(this),failure:this.errorFunction.createDelegate(this),params:{id:this.id,userName:this.userName}})},applyPreference:function(b,a){if(a===undefined){Ext.Ajax.request({url:this.loadPrefURL,success:this.applyPreferenceCbk.createDelegate(this),failure:this.errorFunction.createDelegate(this),params:{id:this.id,userName:this.userName,prefId:b}})}else{this.setFn.call(this.fnScope,a)}},applyDefaultPreferenceCbk:function(a,b){if(a.responseText!=""){this.applyPreferenceCbk(a,b)}},applyPreferenceCbk:function(b,c){var a=Ext.util.JSON.decode(b.responseText);this.setFn.call(this.fnScope,a)},savePreference:function(g,b,f,e){var c=this.getFn.call(this.fnScope);var d=Ext.util.JSON.encode(c);var a={url:this.savePrefURL,params:{id:this.id,userName:this.userName,prefId:g,prefName:b,prefDesc:f,prefValue:d,isDefault:e},success:this._onSaveSuccessCbk.createDelegate(this),failure:this._onSaveFailureCbk.createDelegate(this)};Ext.Ajax.request(a)},_onSaveSuccessCbk:function(a,b){this.fireEvent("preferenceSaved",b.params.prefId,b.params.prefName)},_onSaveFailureCbk:function(a,b){this.fireEvent("preferenceSaveFailed",b.params.prefId,b.params.prefName,a)},deletePreferences:function(b){var a={url:this.deletePrefURL,params:{id:this.id,userName:this.userName,prefIdArray:b},success:this._onDeleteSuccessCbk.createDelegate(this),failure:this._onDeleteFailureCbk.createDelegate(this)};Ext.Ajax.request(a)},_onDeleteSuccessCbk:function(a,b){this.fireEvent("preferenceDeleted",b.params.prefIdArray)},_onDeleteFailureCbk:function(a,b){this.fireEvent("preferenceDeleteFailed",b.params.prefIdArray,a)},errorFunction:function(a,b){if(b.params.prefId===undefined){this.fireEvent("applyDefaultPreferenceFailed",a)}else{this.fireEvent("applyPreferenceFailed",b.params.prefId,a)}}});Ext.namespace("Ext.ux.netbox");Ext.ux.netbox.PreferenceManagerView=function(a){Ext.QuickTips.init();this.preferenceManager=a.preferenceManager;Ext.ux.netbox.PreferenceManagerView.superclass.constructor.call(this,a);this.preferenceManager.on("preferenceSaved",this.onPreferenceSaved,this);this.preferenceManager.on("preferenceDeleted",this.onPreferenceDeleted,this);this.preferenceManager.on("loadPreferencesFailed",this.resetMenu,this);if(a.defaultErrorHandling===undefined||a.defaultErrorHandling){new Ext.ux.netbox.DefaultPreferenceManagerErrorManager(this.preferenceManager)}this.on("show",this.loadRemotePref,this,{single:true})};Ext.extend(Ext.ux.netbox.PreferenceManagerView,Ext.menu.Menu,{addText:"Add preference",addTooltipText:"Save the actual configuration",manageText:"Manage preferences",manageTooltipText:"Manage the saved configurations",okText:"OK",cancelText:"Cancel",modifyText:"Modify preference",modifyBtnText:"Modify",deleteBtnText:"Delete",closeBtnText:"Close",nameText:"Name",descText:"Description",defaultText:"Default",loadingText:"Loading...",loadRemotePref:function(){if(this.prefStore===undefined){this.prefStore=this.preferenceManager.getAllPreferences();this.prefStore.on("load",this.loadRemotePrefAsync,this);this.prefStore.on("beforeload",this.beforeLoad,this);this.createStableItems()}this.prefStore.load()},createStableItems:function(){if(this.items.getCount()==0){this.add({text:this.addText,tooltip:this.addTooltipText,handler:this.addPreference,scope:this},{text:this.manageText,tooltip:this.manageTooltipText,handler:this.showManageDialog,scope:this},"-")}},beforeLoad:function(){this.resetMenu();this.getEl().mask(this.loadingText)},resetMenu:function(){if(this.getEl()){this.getEl().unmask()}for(var a=this.items.getCount()-1;a>=0;a--){if(this.items.get(a).removable===true){if(this.items.get(a).getEl()&&this.items.get(a).getEl().isMasked()){this.items.get(a).getEl().unmask()}this.remove(this.items.get(a))}}},loadRemotePrefAsync:function(){this.resetMenu();for(var b=0;b<this.prefStore.getTotalCount();b++){var c=this.prefStore.getAt(b);var a="";if(c.get("isDefault")==true){a="x-icon-checked"}this.add({id:c.get("prefId"),text:c.get("prefName"),tooltip:c.get("prefDesc"),iconCls:a,handler:this.applyPreference,scope:this,removable:true})}},addPreference:function(){this.showAddDialog("","","",false)},managePreference:function(){selModel=this.manageGridPanel.getSelectionModel();record=selModel.getSelected();if(record){this.showAddDialog(record.get("prefId"),record.get("prefName"),record.get("prefDesc"),record.get("isDefault"))}},deletePreferences:function(){selModel=this.manageGridPanel.getSelectionModel();records=selModel.getSelections();if(records.length>0){var b=[];for(var a=0;a<records.length;a++){b.push(records[a].get("prefId"))}this.preferenceManager.deletePreferences(b)}},showAddDialog:function(d,a,c,b){if(!this.addDialog){this.addDialog=new Ext.Window({width:400,height:160,minWidth:400,minHeight:160,closeAction:"hide",layout:"fit",plain:true,modal:true,shadow:true,items:this.addForm=new Ext.form.FormPanel({labelWidth:75,border:false,bodyStyle:"background-color:transparent;padding:10px; ",items:[{id:"prefId",xtype:"hidden",name:"prefId",value:d},{id:"prefName",xtype:"textfield",fieldLabel:this.nameText,name:"prefName",value:a,allowBlank:false,width:"96%"},{id:"prefDesc",xtype:"textfield",fieldLabel:this.descText,name:"prefDesc",value:c,width:"96%"},{id:"isDefault",xtype:"checkbox",fieldLabel:this.defaultText,name:"isDefault",checked:b}]}),buttons:[{text:this.okText,handler:this.savePreference,scope:this},{text:this.cancelText,handler:function(){this.addDialog.hide()},scope:this}]})}else{this.addForm.findById("prefId").setValue(d);this.addForm.findById("prefName").setValue(a);this.addForm.findById("prefDesc").setValue(c);this.addForm.findById("isDefault").setValue(b)}if(d!=""){this.addDialog.setTitle(this.modifyText)}else{this.addDialog.setTitle(this.addText)}this.addDialog.show()},showManageDialog:function(){if(!this.manageDialog){this.manageDialog=new Ext.Window({title:this.manageText,width:600,height:300,minWidth:500,minHeight:250,closeAction:"hide",layout:"fit",plain:true,modal:true,shadow:true,items:this.manageGridPanel=new Ext.grid.GridPanel({store:this.prefStore,border:false,enableColumnHide:false,columns:[{id:"prefId",hidden:true,dataIndex:"prefId"},{id:"prefName",header:this.nameText,sortable:true,dataIndex:"prefName",width:200},{id:"prefDesc",header:this.descText,sortable:true,dataIndex:"prefDesc",width:330},{id:"isDefault",header:this.defaultText,sortable:true,dataIndex:"isDefault",width:60,renderer:this.imageRenderer}],viewConfig:{forceFit:true},tbar:[{text:this.modifyBtnText,cls:"x-btn-text-icon",iconCls:"x-icon-modify",handler:this.managePreference,scope:this},"-",{text:this.deleteBtnText,cls:"x-btn-text-icon",iconCls:"x-icon-delete",handler:this.deletePreferences,scope:this},"-",{text:this.closeBtnText,cls:"x-btn-text-icon",iconCls:"x-icon-cancel",handler:function(){this.manageDialog.hide()},scope:this}]})})}this.manageDialog.show()},imageRenderer:function(e,d,a,f,c,b){if(e==true){return('<img class="x-menu-item-icon x-icon-checked" src="'+Ext.BLANK_IMAGE_URL+'"/>')}},applyPreference:function(b,a){this.preferenceManager.applyPreference(b.getId())},savePreference:function(){var d=this.addForm.findById("prefId");var a=this.addForm.findById("prefName");var c=this.addForm.findById("prefDesc");var b=this.addForm.findById("isDefault");if(a.isValid()){this.preferenceManager.savePreference(d.getValue(),a.getValue(),c.getValue(),b.getValue())}},onPreferenceSaved:function(a,b){this.prefStore.reload();this.addDialog.hide()},onPreferenceDeleted:function(a){this.prefStore.reload()}});Ext.ux.netbox.DefaultPreferenceManagerErrorManager=function(a){a.on("applyDefaultPreferenceFailed",this.manageApplyDefaultPreferenceFailed,this);a.on("applyPreferenceFailed",this.manageApplyPreferenceFailed,this);a.on("loadPreferencesFailed",this.manageLoadPreferencesFailed,this);a.on("preferenceDeleteFailed",this.manageDeletePreferencesFailed,this);a.on("preferenceSaveFailed",this.manageSavePreferenceFailed,this)};Ext.ux.netbox.DefaultPreferenceManagerErrorManager.prototype={failedToApplyDefaultPreferenceTitle:"Error applying default preference",failedToApplyPreferenceTitle:"Error applying preference",failedToSavePreferenceTitle:"Error saving preference",failedToDeletePreferenceTitle:"Error deleting preference(s)",failedToLoadPreferenceTitle:"Error loading preferences",manageApplyDefaultPreferenceFailed:function(a){this.manageError(this.failedToApplyDefaultPreferenceTitle,a.responseText)},manageApplyPreferenceFailed:function(b,a){this.manageError(this.failedToApplyPreferenceTitle,a.responseText)},manageSavePreferenceFailed:function(c,a,b){this.manageError(this.failedToSavePreferenceTitle,b.responseText)},manageDeletePreferencesFailed:function(a,b){this.manageError(this.failedToDeletePreferenceTitle,b.responseText)},manageLoadPreferencesFailed:function(a){this.manageError(this.failedToLoadPreferenceTitle,a.responseText)},manageError:function(b,a){Ext.MessageBox.show({title:b,msg:a,buttons:Ext.MessageBox.OK,icon:Ext.MessageBox.ERROR,minWidth:200})}};